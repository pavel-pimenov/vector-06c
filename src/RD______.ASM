;;
;; ///////// 8.03.1993 /////////////////////////////////////
;; //	(C) 1993  Караганда  КптИ  ЭА-91-2  Пименов П.А   //
;; //							  //
;; //  RD.ASM - Программа для чтения диска формата IBM	  //
;; //		  на "физическом" ураовне.		  //
;; // ========= 52-81-95 ========= PPA Systems ========	  //
;; //		Copyright  by  Пименов Паша		  //
;; /////////////////////////////////////////////////////////
;;

RD_BUFER	EQU	0200H		;
START_CULIND	EQU	2		;
COUNT_TRACK	EQU	4		;

	INCLUDE	MACRO.PPA		;
	INCLUDE	VG.EQU			;
;;
;;////////// Краткий алгоритм работы программы: ////////////
;;    Производим установку блока головок на нулевой цилиндр
;; открываем на диске "C" файл: TMP.TMP.
;; Производим  чтение  информации  с  двух  сторон диска,
;; скидываем прочитанный масив в файл, таким образом читаем
;; 20 дорожек что в формате 360 Кбайт соответствует 180 К.
;;
;;
RD_START:
	MVI	A,34H		; Установим маску выбора
	STA	DISK_MASKA	; рабочего накопителя.
	MVI	A,START_CULIND	; Установим начальный цилиндр
	DI			; запретим прерывания
	MVI	B,0FFh		; 720 K.
	CALL	SET_CULIND	; переместим голову
;;
;;  Произведем чтение текущей дорожки в рабочий буфер
;;
	MVI	B,0FFh		; т.е. Диск 720 Кб.
	LXI	D,RD_BUFER	;
	MVI	A,COUNT_TRACK;
RD_LOOP_1:
	CALL	RD_CULINDR	;
	CALL	RD_IBM_STEP	;
	DCR	A		;
	JNZ	RD_LOOP_1	;

	HLT			;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   RD_IBM_STEP - Процедура шагания по  диску размеченому
;; на IBM PC.
;;	B =0 - То диск 360 К.
;;	B!=0 -  --//-- 720 К. 
RD_IBM_STEP:
	PUSH	PSW		;
	MVI	A,01000000B	; Команда - ШАГ Вперед.
	OUT	DS_COM		; выполним 2 (1) раза.
	CALL	DS_WAIT		;
	MOV	A,B		;
	ORA	A		;
	JNZ	RD_IBM_STEP_00	;
	OUT	DS_COM		;
	CALL	DS_WAIT		;
RD_IBM_STEP_00:			;
	IN	DS_TRACK	; но регистр дорожки увеличим
	INR	A		; на единицу.
	OUT	DS_TRACK	;
	POP	PSW		;
	RET			;

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   Процедура осуществляет чтение текущего цилинда
;; размер дорожки фиксированный: 9 секторов по 512 байт.
;;

RD_CULINDR:
	PUSH	PSW		;
	DI			; Обязательно необходимо
				; запрещать прерывание после
				; вызова системной функции.
	MVI	A,34H		; установим выбор нолевой головы
	STA	DISK_MASKA	;
	CALL	RD_PPA		; прочтем дорожку
	MVI	A,30H		; сменим головку
	STA	DISK_MASKA	;
	CALL	RD_PPA		; повторим чтение
	POP	PSW		;
	RET			; возврат.

;;
;;ШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШ
;;
;;   Подпрограмма  чтения последовательномти из 9-и секторов
;; ( подразумевается что фармат диска соответствует 360 Кб.)
;; для более детального анализа структуры диска и индефикации
;; формата необходимо анализировать Boot sector.
;;

RD_PPA:
	PUSH	PSW		;
	PUSH	H		;
	MVI	L,1		; установим начальный сектор
	MVI	H,9		; установим счетчик
	CALL	PUSK		; запустим двигатель
RD_LOOP:
	MOV	A,L		; прочитать тек номер сектора
	OUT	DS_SECTOR	; скинуть еонтролеру
	CALL	DISK_READ	; прочитать указанный сектор
	INR	L		; увеличить номер
	DCR	H		; корекци счетчика
	JNZ	RD_LOOP		; уйти если все прочитали
	POP	PSW		;
	POP	H		;
	RET			;

;;ШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШШ
;; Процедура чтения сектора в любое произвольное место памяти
;; указателем которой служит пара: DE
;; производится чтение одного текущего сектора с текущей
;; дорожки и текущей стороны
;;
DISK_READ:	
	MVI	A,10000000B	; чтение сектора
	OUT	DS_COM		; подать команду и подождать
D_LOOP1:
	IN	DS_STATUS	; пока контролер подготовится
	RRC			; передавать данные
	JNC	D_LOOP1		; 
	CALL	READ_SEC	; прочитать сектор
	RET			; возврат в основной модуль

;;
;; /////////////////////////////////////////////////////////
;; //	(C) 1993  Караганда  КптИ  ЭА-91-2  Пименов П.А   //
;; //							  //
;; //	    Пакет продпрограмм для работы с НГМД	  //
;; //		  на "физическом" ураовне.		  //
;; // ========= 52-81-95 ========= PPA Systems ========	  //
;; //		Copyright  by  Пименов Паша		  //
;; /////////////////////////////////////////////////////////
;;
;;   Все входящие в файл процедуры схраняют все реги-
;; стры процессора !!!
;;

;;______________________________________________________
;;		Описания глобальных процедур		
;;______________________________________________________
;;

	PUBLIC	READ_SEC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							;;
;;							;;
;;							;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	PUBLIC	SET_CULIND
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   Процедура SET_CULIND производит непосредственное 	;;
;; позицирование головок текущего накопителя при этом 	;;
;; не производится контроль на номер текущей  дорожки 	;;
;; т.е  перемещение  возможно по  неотформатированому 	;;
;; диску.						;;
;;  Так как алгоритм установки не опирается на чтение 	;;
;; номера  дорожки с диска то перемещение  происходит 	;;
;; через  "Востановление"  головок ( на 0-й цилиндр )	;;
;; и  последующим  перемещением  головок  на заданный	;;
;; цилиндр при помощи команды "Поиск"  опять  же  без	;;
;; контроля номера дорожки				;;
;;   Процедуру   необходимо  вызывать  при  начальной	;;
;; инициализации контролера и НГМД.			;;
;; Используемые процедуры:				;;
;;	PUSK - Запуск двигателя и выбор накопителя.	;;
;;	DS_WAIT - ожидание готовности контролера.	;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 

	PUBLIC	DS_WAIT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   Процедура DS_WAIT производит ожидание готовности	;;
;; контролера путем циклического чтения байта статуса	;;
;; и анализа младшего бита.				;;
;;   Процедуру необходимо вызывать для ожидания выпол-	;; 
;; олнения какой либо операции.				;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	PUBLIC	PUSK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   Процедура PUSK производит выбор заданного  нако-	;;
;; пителя (  НГМД  Выбирается  исходя  из содержимого	;;
;; глобальной ячейки DISK_MASKA).			;;
;;   Прочедуру вызывают непосредственно перед началом	;;
;; выполннеия какой либо  операции с диском ( Чтение,	;;
;; запись, и т.д.).					;;
;;   Используемые процедуры:				;;
;;	DS_TIME - Типовая подпрограмма задержки		;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	PUBLIC	DS_TIME
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   Процедура временной задержки. "интервал времени"	;;
;; задается через регистровую пару "BC"			;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;______________________________________________________
;;		Описание глобальных переменных
;;______________________________________________________
;;
	PUBLIC	DISK_MASKA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   Переменная  DISK_MASKA является байтовым элемен-	;;
;; том управлением выбора накопитель при всех  опера-	;;
;; циях ввода-вывода:					;;
;;	D0 - "0" - Накопитель "А"			;;
;;	     "1" - Накопитель "B"			;;
;;	D2 - "0" - Головка 0				;;
;;	     "1" - Головка 1				;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;=======================================================
;;   Процедура чтения информации поступаемой от контр.
;;
READ_SEC:
	IN	DS_STATUS	; прочитать статус контролера
	RRC			;
	RNC			; сектор прочтан ??? 
	RRC			; если да то уход
	JNC	READ_SEC	; ожидаем готовности данных
	IN	DS_DATA		; берем данные
	STAX	D		; сохраняем в буфере
	INX	D		;
	JMP	READ_SEC	;

;;========================================================
;;процедура установки головы накопителя на указаную дорожку
;;Вход:	А - номер дорожки
;;      B = 0 То диск 360 Кбайт
;;	B!= 0 ------- 720 Кбайт
SET_CULIND:
	PUSH	PSW		;
	PUSH	PSW		; сохраняем регистр PSW
	CALL	PUSK		; запускаем двигатель на
	MVI	A,00000000B	; текущем накопителе и
	OUT	DS_COM		; производим востановление
	CALL	DS_WAIT		; головы ( 0-Culinder )
	POP	PSW		; востанавливаем нужную
	CALL	PUSK		; нам дорожку и производим
	OUT	DS_DATA		; перемещение головы
	MVI	A,00011000B	; 
	OUT	DS_COM		;
	CALL	DS_WAIT		; ожидаем готовность
	MOV	A,B		; Проверка на диск.
	ORA	A		;
	JNZ	SET_C_EXIT	;
	XRA	A		; блок корекции номера дор-
	IN	DS_TRACK	; ожки введен для возможности
	RAR			; обрабатывать 40-дорожечную
	OUT	DS_TRACK	; запись.
	POP	PSW		;
SET_C_EXIT:
	RET			; возврат из процедуры
;;========================================================
DS_WAIT:
	PUSH	PSW		;процедура ожидания готовности
DS_WAIT_00:			;
	IN	DS_STATUS	;контролера НГМД
	RRC			;
	JC	DS_WAIT_00	;занято идет исполнение команды
	POP	PSW		;
	RET			;
;;========================================================
PUSK:
	PUSH	PSW		; процедура запуска двигателя
PUSK_00:			;
	LDA	DISK_MASKA	; по заданой маске
	OUT	DS_MOTOR	; в порт управления
	LXI	B,2000H		; константа задержки
	IN	DS_STATUS	;
	CALL	DS_TIME		; делаем паузу
	RLC			;
	JC	PUSK_00		; если не готов то повторить
	POP	PSW		; востановим флаги
	RET			; возврат
;;
DISK_MASKA:
	DB	00H	;маска выбора рабочего накопителя
			; D2 - бит отвечает за "сторону"
			; диска (при обмене) если этот
			; бит = 1 то выбераются четные
			; дорожки ( по утилите DD.COM )
			; если = 0 то не четные

;;
;;========================================================
DS_TIME:
	PUSH	PSW		; Типовая программа временной
	PUSH	B		; задержки
DS_T0:				;
	DCX	B		; пустой цикл
	MOV	A,B		; ---//----
	ORA	C		; ---//----
	JNZ	DS_T0		; ---//----
	POP	B		; востанавливает регистры
	POP	PSW		; и возвращаемся
	RET			;
;;========================================================
	END

