	Title	DE.ASM
	ORG	0000h
;;
;; //////// 15.04.1993 ///////////////////////////////////
;; //  (C) 1993  Караганда  КптИ  ЭА-91-2  Пименов П.А	//
;; //							//
;; // ====== 52-81-95 ======== PPA Soft Systems ======	//
;; //		Copyright  by  Пименов Паша		//
;; ////// "Шел дождь на остановки" ///////////////////////
;;
	Include	MACRO.PPA	; Макоподстановки
	Include	EQU.PPA		; Константы.
;;
;; Глобальные точки входа в модуль сервисных процедур
;;
	Public	PUTSXY_Z	; выод ASCIIZ строки
	Public	W_PUTSXY_Z	;
	Public	SCREEN_CLS	; фирменая отчистка.
	Public	CINV		; генерация курсора
	Public	CINV_ABS	; ---//---//---//---
	Public	C_ALT_INV	; размер курсора.
	Public	INV_LINE	; инвертирует строку.
	Public	GOR_STREL	; горизонтальная стрелка
	Public	VER_STREL	; вертикальная стрелка
	Public	DUMP_WIS	; УМНЫЙ дамп.
	Public	DUMP_HEX	; шестнадцатеричный дамп
	Public	DUMP_TEXT	; --//--
	Public	LINE_HEX	; ---//--- строка
	Public	LINE_TEXT	; --//--
	Public	W_PUT_HEX	; оконный HEX вывод
	Public	PUT_HEX		; абсолютный --//--//--
	Public	PUT_NIBL	; вывод младшего нибла
	Public	NEW_DUMP	;
	Public	LOAD_OFFSET	;
	Public	RE_PRINT_POS	;
	Public	RE_PR_DISK	;
	Public	RE_DISK_POS	;
	Public	PUT_CHAR	;
	Public	PUT_WORD_HEX	;
	Public	NEG_DE		;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	  Выходы на внешние функции драйверов.		;;
;;							;;

;;///////////// KD.ASM - Драйвер клавиатуры //////////////

	External BEEP	; Щелчек.
	External IN_KEY	; взять код из буфера
	External KEY_RESET; сброс клавиатуры

	External KEY_INT; указатель драйвер

	External FLAGC	; флаг цветогенератора
	External COLOR	; код цветовой палитры
	External RUSLAT	; статус по алфавиту
	External SMALL	; статус по регистру
	External KEY_KOD; динамический код клавиш
	External SEEK	; указатель заполнения
	External KEY_NUM; апаратный номер клавиши

;;//////// WD.ASM - Драйвер оконного интерфейса //////////

;========= основная таблица переходов ==========
	External WPUTC1	;вывод символа коорд. в 'DE'
	External GETC	;чтение символа -//-
	External ACTIV	;открытие окна (DE),(HL),а-флаг
	External DEACTI  ;закрытие окна
	External BORT	;нарисовать рамку
	External HOME	;отчистка окна
	External SCROL1	;скроллинг окна вверх
	External SCROL2	;--//-- вниз
;;	External SCROL3	;--//-- вправо (на 2 символа)
;;	External SCROL4	;--//-- влево --//--
;;
;========== дополнительная таблица переходов ==========
;реализует теже функции но используют абсолютные координаты
;;
	External PUTCXY	
	External GETCXY	
	External RAMKA	;флаг передовать не нужно
	External TEN	;
	External CLS	
	External SCRN	
	External SCRV	
;;	External SCRP	
;;	External SCRL	
	External ABS_DE
	External LIIR
	External LDIR
	External ADDREM
	External ADDRSC	

;______________ рабочие ячейки ________________
	External CURSOR
	External WIND1
	External WIND2
	External NUM
	External BUF_SEK
	External FLAGW

;___________ инсталяционные крнстанты __________

	External BUF_ZISE  ; 2 байта показыв размер буфера.
	External BUF_BEGIN ;2 байта указывающие на начало
			   ; буфера окон.
	External W_ZG	 ; 2 байта указыв начало знако ген.
	External W_EMUL_TXT
			 ; 2 байта указыв на область эмул-
			 ; яции текстового экрана ( 1Кбайт)
	External STACK_SEGMENT;
			 ; указатель верхушки стека.
	External BUF_DISK;
;____________ рабочие ячейки ______________
	External POSITION	;
	External DE_MODE	;
	External CULINDER	;
	External HEAD		;
	External SECTOR		;
;___________________________________________
	External CC_LEFT_KEY	;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	    Исхдный текст сервисных процедур.		;;
;;++++++++++++++++++++++++++++++++++++++++++++++++++++++;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   Процедура инверсии строки в оконных  координатах	;;
;;	B - ДЛИНА СТРОКИ.				;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INV_LINE:
	LXI	H,C_ALT_INV	;
	INX	H		;
	MVI	M,14		;
	PUSH	B		;
	PUSH	D		;
	CALL	ABS_DE		;
I_L_00:
	CALL	CINV_ABS	;
	INR	D		;
	DCR	B		;
	JNZ	I_L_00		;
	POP	D		;
	POP	B		;
	MVI	M,1		;
	RET			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Производит обнавление окна указателя сектора	;;
;; используя данные полученные из рабочих ячеек.	;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RE_DISK_POS:
	CALL	RE_PR_DISK	;
	CALL	CC_LEFT_KEY	;
	LXI	H,BUF_DISK	;
	SHLD	POSITION	;
	BH_MOV			;
	LXI	D,0000h		;
	LXI	H,0807h		;
	SHLD	CURSOR		;
	XCHG			;
	CALL	DUMP_WIS	;
	RET			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура организации вывода "умного" дампа	;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DUMP_WIS:
	LDA	DE_MODE		;
	INR	A		;
	CZ	DUMP_TEXT	;
	CNZ	DUMP_HEX	;
	CALL	KEY_RESET	;
	RET			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   Процедура обновления текущего состояния диска.	;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RE_PR_DISK:
	LXI	D,170Dh		;
	LDA	CULINDER	;
	CALL	PUT_HEX		;
	INR	D		;
	LDA	HEAD		;
	RRC			;
	RRC			;
	XRI	00000001b	;
	CALL	PUT_NIBL	;
	LDA	SECTOR		;
	INR	D		;
	CALL	PUT_NIBL	;
	RET			;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура аналогична PUTSXY_Z только производит	;;
;; преобразования относительных координат.		;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
W_PUTSXY_Z:
	PUSH	D		;
	CALL	ABS_DE		;
	CALL	PUTSXY_Z	;
	POP	D		;
	RET			;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	 Процедура   подготавливает  "обновление"  окна ;;
;;  редактирования  путем заполнения регистров для рас-	;;
;; печатки дампа памяти:				;;
;;	BC - указатель на физическую память дампа.	;;
;;	HL - логическое смещение ( код слева дампа.)	;;
;;	DE - относительные кординаты вывода дампа.	;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NEW_DUMP:
	CALL	LOAD_OFFSET	;
	XCHG			;
	LHLD	CURSOR		;
	MOV	A,L		;
	XCHG			; HL - смещение адреса.
	LXI	D,-16		; "приращение".
N_D_01:
	CPI	07h		;
	JZ	N_D_00		; подняли на крышу.
	INR	A		;
	DAD	D		;
	JMP	N_D_01		;
N_D_00:
	MOV	A,L		;
	ANI	11110000b	;
	MOV	L,A		;
	LXI	D,0009h		;
	LXI	B,BUF_DISK	;
	PUSH	H		;
	DAD	B		;
	BH_MOV			;
	POP	H		;
	RET			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура получения относительного адреса байта	;;
;; HL - смещение относительно BUF_DISK			;;
;; DE - физический адрес буфера BUF_DISK		;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LOAD_OFFSET:
	LHLD	POSITION	; читаем физический адрес.
	LXI	D,BUF_DISK	; вычитаем смещение.
	CALL	NEG_DE		; резулитат в HL
	DAD	D		;
	RET			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Вспомогательная процедура производит вывод за-	;;
;; головка дамповой строки (xxxx: |)			;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ADDR_DUMP_HLP:
	MVI	D,1		;
	CALL	ABS_DE		; получим абсолютные коор.
	MOV	A,H		;
	CALL	PUT_HEX		;
	MOV	A,L		;
	CALL	PUT_HEX		;
	MVI	A,':'		;
	CALL	PUTCXY		;
	INR	D		;
	MVI	A,83h		;
	CALL	PUTCXY		;
	INR	D		;
	INR	D		;
	MVI	H,10H		;
	RET			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура осуществляет печать строки текста в	;;
;; формате редактора. ========= TEXT =========		;;
;;	BC - указатель на последовательность 16 байт.	;;
;;	E  - вертикальная координата распечатки.	;;
;;	HL - логический адрес колонки.			;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LINE_TEXT:
	PUSH	D		; сохраним регистры
	PUSH	H		; в стеке.
	PUSH	PSW		;
	CALL	ADDR_DUMP_HLP	;
L_T_00:				;
	LDAX	B		;
	INX	B		;
	CALL	PUT_CHAR	;
	INR	D		;
	DCR	H		;
	JNZ	L_T_00		;
	POP	PSW		;
	POP	H		;
	POP	D		;
	RET			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура выводит полный "дамп" в основное окно ;;
;; дискового  редактора в формате ======== TEXT =======	;;
;;	BC - указатель на дамп памяти.			;;
;;	HL - "адрес" верхней строки дампа.		;;
;;	DE - координата вывода (++ по верникали.)	;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DUMP_TEXT:			;
	PUSH	D		;
	PUSH	PSW		;
	LXI	D,0008h		;
D_T_00:				;
	DCR	E		;
	CALL	LINE_TEXT	;
	MOV	A,E		;
	MVI	E,010h		;
	DAD	D		;
	MOV	E,A		;
	JNZ	D_T_00		;
	POP	PSW		;
	POP	D		;
	RET			;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура осуществляет обновление указателя ре-	;;
;; дактирования с учетом параметрa POSITION		;;
;; в HL должно передоватся адрес позиции.		;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RE_PRINT_POS:			;
	MOV	B,M		;
	PUSH	D		;
	LXI	D,BUF_DISK	;
	CALL	NEG_DE		;
	DAD	D		;
	LXI	D,280Dh		;
	CALL	PUT_WORD_HEX	;
	MOV	A,B		;
	INR	D		;
	INR	D		;
	INR	D		;
	INR	D		;
	CALL	PUT_HEX		;
	INR	D		;
	INR	D		;
	INR	D		;
	INR	D		;
	CALL	PUT_CHAR	;
	POP	D		;
	RET			;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура распечатывает символ с учетом специ-	;;
;; ки редактора HEX кода.				;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PUT_CHAR:			;
	PUSH	PSW		;
	CPI	20h		;
	JNC	P_C_0		;
	MVI	A,'.'		;
P_C_0:
	CPI	80h		;
	JC	P_C_1		;
	CPI	0C0h		;
	JNC	P_C_1		;
	MVI	A,'.'		;
P_C_1:
	CALL	PUTCXY		;
	POP	PSW		;
	RET			;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура вывода слова содержащегося в HL 	;;
;; в экран по координатам задаваемым парой DE		;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PUT_WORD_HEX:
	PUSH	PSW		;
	MOV	A,H		;
	CALL	PUT_HEX		;
	MOV	A,L		;
	CALL	PUT_HEX		;
	POP	PSW		;
	RET			;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура получения дополнительного кода для	;;
;; регистровой пары: DE					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NEG_DE:			;
	MOV	A,D	;
	CMA		;
	MOV	D,A	;
	MOV	A,E	;
	CMA		;
	MOV	E,A	;
	INX	D	;
	RET		;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура выводит дамп в стандартном формате	;;
;; дискового  редактора в формате ======== HEX ========	;;
;;	BC - указатель на дамп памяти.			;;
;;	HL - "адрес" верхней строки дампа.		;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DUMP_HEX:			;
	PUSH	D		;
	PUSH	PSW		;
	LXI	D,0008h		;
D_H_00:				;
	DCR	E		;
	CALL	LINE_HEX	;
	MOV	A,E		;
	MVI	E,010h		;
	DAD	D		;
	MOV	E,A		;
	JNZ	D_H_00		;
	POP	PSW		;
	POP	D		;
	RET			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура  выводит "дамповую"  строку в формате	;;
;; ====================== HEX =========================	;;
;;	BC - указатель на последовательность 16 байт.	;;
;;	E - оконная вертик. координата вывода строки.	;;
;;	HL - "адрес" стоящий слева от дампа.		;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LINE_HEX:
	PUSH	D		; сохраним регистры
	PUSH	H		; в стеке.
	PUSH	PSW		;
	CALL	ADDR_DUMP_HLP	;
L_H_00:				;
	LDAX	B		;
	INX	B		;
	CALL	PUT_HEX		;
	INR	D		;
	DCR	H		;
	JNZ	L_H_00		;
	POP	PSW		;
	POP	H		;
	POP	D		;
	RET			;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   Процедура выводит байт в шестнадцетиричной системе	;;
;; счисление по относительным координатам (W_PUT_HEX) и	;;
;; абсолютным (PUT_HEX).				;;
;;	DE - координаты вывода на экран.		;;
;;	A  - байт необходимый для представления		;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
W_PUT_HEX:			;
	PUSH	B		;
	CALL	ABS_DE		;
	POP	B		;
PUT_HEX:			;
	PUSH	B		;
	MOV	B,A		;
	RRC			;
	RRC			;
	RRC			;
	RRC			;
	CALL	PUT_NIBL	;
	MOV	A,B		;
	CALL	PUT_NIBL	;
	MOV	A,B		;
	POP	B		;
	RET			;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура вывда одного младшего нибла из байта	;;
;; передоваемого в аккамуляторе.			;;
;;		!!! НЕ СОХРАНЯЮТСЯ РЕГИСТРЫ !!!		;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PUT_NIBL:			;
	ANI	0FH		;
	CPI	0AH		;
	JC	P_N_0		;
	ADI	7		;
P_N_0:	ADI	30H		;
	CALL	PUTCXY		;
	INR	D		;
	RET			;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;     Процедура вывода ASCIIZ строки в абс. координаты	;;
;; DE - координаты.					;;
;; BC - указатель на строку символв.			;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PUTSXY_Z:
	PUSH	D		;
	PUSH	PSW		;
PUTS_LOOP:
	LDAX	B		;
	INX	B		;
	ORA	A		;
	JZ	PUTS_EXIT	;
	CALL	PUTCXY		;
	INR	D		;
	JMP	PUTS_LOOP	;
PUTS_EXIT:
	POP	PSW		;
	POP	D		;
	RET			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура фирменой отчистки экрана.		;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SCREEN_CLS:
	IN	3		;
	MOV	L,A		;
	LXI	B,0		;
SCRECLS0:
	MVI	H,0A0H		;
SCRECLS:
	MOV	M,B		;
	INR	H		;
	MOV	A,H		;
	CPI	0E0H		;
	JNZ	SCRECLS		;
	MOV	A,L		;
	DCR	L		;
	OUT	3		;
	INR	C		;
	JNZ	SCRECLS0	;
	RET			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Прцедура генерации курсора в текстовом режиме	;;
;;  используется  не посредственный доступ к экранной	;;
;;  памяти и инверсия соответстующих "ниблов"		;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CINV_ABS:
	PUSH	B	;
	PUSH	D	;
	PUSH	H	;
	PUSH	PSW	;
	JMP	CINV_DOP;
CINV:
	PUSH	B	;
	PUSH	D	;
	PUSH	H	;
	PUSH	PSW	;
	LHLD	CURSOR	;
	XCHG		;
	CALL	ABS_DE	;
CINV_DOP:
	CALL	ADDRSC	;
	MVI	B,0	;
	MVI	C,01h	;смещ
	DAD	B	;
C_ALT_INV:
	MVI	E,0Eh	;
	MOV	B,E	;высота
	MOV	A,D	;
	RRC		;
	MVI	A,0FH	;
	JC	CV2	;
	CMA		;
CV2:
	MOV	C,A	;
CV0:
	MOV	A,M	;
	XRA	C	;
	MOV	M,A	;
	INR	L	;
	DCR	B	;
	JNZ	CV0	;
	DCR	L	;
	MOV	B,E	;
	MOV	A,H	;
	ADI	20H	;
	MOV	H,A	;
CV1:
	MOV	A,M	;
	XRA	C	;
	MOV	M,A	;
	DCR	L	;
	DCR	B	;
	JNZ	CV1	;
	POP	PSW	;
	POP	H	;
	POP	D	;
	POP	B	;
	RET		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура рисует вертикальную стрелку		;;
;; DE - координаты стрелки.				;;
;; B  - размер стрелки.					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
VER_STREL:
	PUSH	D	;
	PUSH	PSW	;
	MVI	A,3	;
	CALL	PUTCXY	;
	DCR	B	;
	DCR	B	;
	INR	A	;
ST0:
	DCR	E	;
	CALL	PUTCXY	;
	DCR	B	;
	JNZ	ST0	;
	DCR	E	;
	INR	A	;
	CALL	PUTCXY	;
	POP	PSW	;
	POP	D	;
	RET		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура рисует горизонтальную стрелку		;;
;; DE - координаты.					;;
;; B  - размер.						;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
GOR_STREL:
	PUSH	D	;
	PUSH	PSW	;
	MVI	A,6	;
	CALL	PUTCXY	;
	INR	A	;
	DCR	B	;
	DCR	B	;
PA0:
	INR	D	;
	CALL	PUTCXY	;
	DCR	B	;
	JNZ	PA0	;
	INR	A	;
	INR	D	;
	CALL	PUTCXY	;
	POP	PSW	;
	POP	D	;
	RET		;

	END

