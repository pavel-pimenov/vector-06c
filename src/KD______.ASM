		Title	KD.ASM
		Include EQU.PPA
;;
;; Пакет написан  на  ассемблере  (Intel 8080) и служит для
;; програмной поддержки  модуля  клавиатуры ,содержит пере-
;; работаный  драйвер  клавиатуры  от "Basic Korvet v 2.0"
;; последняя модификация: 12.4.1993 
;; Караганда  т. 52-81-95 	/* PPA Soft Systems */
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Пакет  предназнечен  для склейки с другими про-	;;
;; цессами  которым  требуется  работать  с клавиатурой	;;
;; кроме  этого  драйвер производит начальную установку	;;
;; режима  экрана  ( 512 * 256  - 2 цвета дновременно )	;;
;; адреса экранной области: 0A000h - 0DFFFh.		;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	Public	BEEP	; генерация сигнала типа "щелчек"
	Public	IN_KEY	; прочитать код клавиши из буфера
	Public	KEY_INT	; обработчик прерывания.
	Public	KEY_RESET; сброс клавиатуры.
	Public	KEY_DELAY; Ожидания нажатия.
	Public	FLAGC	; флаг активности цветогенератора
	Public	COLOR	; код текущего цвета.
	Public	RUSLAT	; статус клавиатуры по алфавиту
	Public	SMALL	; ---//----//----//--- регистру
	Public	SEEK	; указатель заполнения
	Public	KEY_KOD	; динамический код клавиатуры
	Public	KEY_NUM	; физический номер клавиши
	
;;////////// рабочие ячейки KEYBOARD.DRIVE ////////
FLAGC:	DB	0	;если <>0 то цветогенератор не трогается
RAB0:	DB	0	
COLOR:	DW	0000H	
RUSLAT:	DB	0	
SMALL:	DB	0	
KEY_KOD: DB	255	;сод.код клавиши наж в данный момент
KOOL:	DB	0	
DREB:	DB	0	
SEEK:	DB	1	
	DB	"PPA Systems"	;буфер клавиатуры
	DB	CR,LF,0		; 14 - элементов

;; Модификация драйвера: 12.4.1993 ++++ Понедельник ++++
;; ================ 21:55 "Good luck "================
;; произведено коментирование исходного текста модуля драй-
;; вера клавиатуры с целью использования его в последующих
;; разработках  а  также   изменены  некоторые управляющие
;;  клавиши:
;;  "F5" - Тригерная  клавиша переключает  прио-
;;         рететное состояние датчика  прописные
;;         - строчные  буквы  текущего  алфавита
;;
;;  "СС" - Клавиша производит временное переклю-
;;         чение маленьких-больших букв
;;

KEY_INT:
	PUSH	B	; Произвожу полное сохранение
	PUSH	D	; состояния процессора в момент
	PUSH	H	; возникновения прерывания
	PUSH	PSW	;
	LXI	H,FLAGC	; Читаем флаг подмены палитры
	MOV	A,M	;
	ORA	A	;
	JNZ	KEY_DO0	; если =0 то перепрограмировать таблицу
	DCR	M	;
	LHLD	COLOR	; Читаю два байта физических цветов
	LXI	D,100FH	; фона и переднего плана
KEY_00:
	MOV	A,E	; H - цвет ПЕРДНЕГО ПЛАНА
	OUT	02	; L - цвет ФОНА
	ANI	06	; и переходим к распределению
	MOV	A,L	; етих байтов в соответствии
	JZ	KEY_01	; с математематическими цветами
	MOV	A,H	;
KEY_01:
	OUT	0FH	; производим многократную запись
	DCR	E	; полученого кода в связи с малой
	OUT	0FH	; скоростью работы ОЗУ -К155РУ2-
	OUT	0FH	;
	OUT	0FH	;
	DCR	D	;
	OUT	0FH	;
	JNZ	KEY_00	;
KEY_DO0:
	MVI	A,8AH	; Настраиваем системный порт на
	OUT	00	; сканирование клавиатуры
	LXI	H,RAB0	;
	IN	01	; прочитать состояние порта "C"
	ANI	80H	; Анализируем бит клавиши "РУС/ЛАТ"
	JNZ	M5	; переход если она не нажата !!!
	MOV	A,M	; проверяем содержимое вспомогате-
	ORA	A	; льной ячейки если она равна нулю
	JZ	DONE01	; то клавиша РУС/ЛАТ Еще нажата
	DCR	M	; и повторную переустановку прои-
	LDA	RUSLAT	; зводить не надо
	XRI	08H	; производим инверсию в бите свето-
	STA	RUSLAT	; диода
	JMP	DONE01	;
M5:
	MVI	M,1	; фиксируем не нажатое состояние
DONE01:
	XRA	A	; выдаем на матрице запрос о наж-
	OUT	03	; атых клавишах
	IN	02	; 
	INR	A	; производим проверку на нажатие
	JZ	EXIT1	; уходим если не нажата ни одна
	LXI	B,0FE08H; клавиша
	LXI	D,0800H	; переходим к подсчету места нажатия
	MOV	A,B	; по средством гонерачии на входных
KEY01:
	OUT	03	; линиях кода : "Бегущий ноль"
	IN	02	; и анализом кода на выходных
	INR	A	; линиях матрици клавиатуры
	JNZ	KEY010	;
	MOV	A,E	;
	ADD	D	;
	MOV	E,A	;
	MOV	A,B	;
	RLC		;
	MOV	B,A	;
	DCR	C	;
	JNZ	KEY01	;
EXIT1:
	CALL	HLP	; произведем установку параметров
	MVI	A,0FFH	; экрана и завершим прерывание
	STA	KEY_KOD	; с кодом не нажатой клавиши
	JMP	MAIN_EXIT;
KEY010:
	DCR	A	;
KEY00:
	RAR		;
	INR	E	;
	JC	KEY00	;
	DCR	E	;
	CALL	HLP	;
	LXI	H,KEY_NUM;
	MOV	M,E	; сохраняем номер клавиши
	INX	H	; DONEM-LABEL
	PUSH	H	; вектор перехода сохраняем в стеке
	IN	01H	; читаем статус управляющих клавиш
	LXI	B,1020H	; BC - рабочие константы
	ANA	C	; выделяем клавишу "СС"
	MOV	D,A	; сохраняем в регистре MPU
	MOV	A,E	; прочитаем номер клавиши
	CMP	B	; сравним с кодом == 10H ===
	JNC	DONE03	; переход если номер больше 10H
;; Производим обработку нажатия клавиш служебной клавиатуры
;; имеющие следующие номера:
;;
	CPI	03H	; номер клавиши менише 10H
	RNZ		; т.е. нажата клавиша служебной
	MOV	A,D	; клавиатуры ( первые две линии на
	ORA	A	; схеме необходимо поменять местами)
	MOV	A,E	; здесь необходимо проверить только
	RNZ		; клавишу "ЗБ" в зависимости от
	MVI	A,5FH	; нажатия клавиши "СС"
	RET		;

DONE03:
	CMP	C	; сравним с кодом == 20H ==
	JNC	DONE05	; переход если болише или равно
;; Обработаем вариант нажатия клавиш с номерами
;; от 10H-20H - цифры и спец знаки
	MOV	A,D	; возьмем статус клавишы "СС"
	ORA	A	; если там 0 то значит нажата
	MOV	A,E	; иначе не нажата
	JZ	KEY02	; 
	ADD	B	;
KEY02:
	ADD	B	;
	MOV	L,A	;
	MOV	A,E	;
	CPI	1CH	;
	MOV	A,L	;
	RC		;
	XRA	B	;
	RET		;
;;
;; Обработаем вариант нажатия буквеных клавиш
;;
DONE05:
	CPI	3FH	; если это пробел то возвр.
	MOV	A,C	; код 20H
	RZ		;
	MOV	A,D	;
	ORA	A	;
	LDA	SMALL	; читаем статус ячейки регистров
	JNZ	D_5_OBH	;
	CMA		;
D_5_OBH:
	ORA	A	; проверяем на равенство 0
	MOV	A,E	; если = 0 то прописные буквы
	JZ	KEY04	; иначе строчные буквы
	ADD	C	;
KEY04:
	ADD	C	;
	MOV	E,A	;
	LDA	RUSLAT	;
	ORA	A	;
	MOV	A,E	;
	RZ		;
	ADI	80H	; корекция на руские буквы
	XRA	C	;
	RET		;
;###				;
KEY_NUM:	DB	'P'	;номер клавиши
;###				;
DONEM:
	LXI	H,MAIN_EXIT;	
	PUSH	H	;
	MOV	C,A	;
	LDA	KEY_KOD	;
	CMP	C	;
	LXI	H,KOOL	;
	JNZ	M22	;
	MOV	A,M	;
AL1:
	CPI	30	;
	JZ	M24	;
M23:
	INR	M	;
	RET		;
M22:
	MVI	M,0	;
	MVI	A,30	;врем.ожидания
	STA	AL1+1	;
	INX	H	;DREB
	MOV	A,M	;
	DCR	A	;
	JNZ	M23	;
	DCR	M	;
	DCX	H	;
	JMP	DONE10	;
M24:
	MVI	M,0	;
	MVI	A,2	;CONST AUTO
	STA	AL1+1	;
DONE10:
	MOV	A,C	;
	DCX	H	;
	MOV	M,A	;
	DCX	H	;
	DCR	B	;
	CMP	B	;
	JNZ	M31	;
	MOV	A,M	;SMALL
	CMA		;
	MOV	M,A	;
M31:
	LXI	H,SEEK	;
	MOV	A,M	;
	CMP	B	;
	CALL	BEEP	;
	RZ		;
	INR	M	;
	MOV	C,A	;
	MVI	B,0	;
	DAD	B	;
	LDA	KEY_KOD	;
	MOV	M,A	;
	RET		;
MAIN_EXIT:
	POP	PSW	;
	POP	H	;
	POP	D	;
	POP	B	;
	EI		;
	RET		;

HLP:
	MVI	A,88H	;
	OUT	00H	;
	LDA	RUSLAT	;
	OUT	01	;
	MVI	A,0FFH	;скролинг
	OUT	03	;
	MVI	A,10H	;режим и бордюр
	OUT	02	;
	RET		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Процедура подачи щелчка по средством штатного	;;
;; генератора "шума" (порт магнитофона)			;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
BEEP:
	PUSH	PSW	;
	MVI	B,8	;
	MVI	E,30H	;
	LDA	RUSLAT	;
	MOV	C,A	;
BIP0:
	INR	A	;
	ANI	1	;
	ORA	C	;
	OUT	1	;
	PUSH	D	;
BIP:
	DCR	E	;
	JNZ	BIP	;
	POP	D	;
	DCR	B	;
	JNZ	BIP0	;
	POP	PSW	;
	RET		;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Прцедура  ожидает  нажатие клавиши и возвращает	;;
;; полученый ASCII код в регистре "А"			;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
KEY_DELAY:
	CALL	IN_KEY		;
	INR	A		;
	JZ	KEY_DELAY	;
	DCR	A		;
	RET			;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;     Процедура взятия кода клавиши из рвбочего буфера	;;
;; если буфер пуст то возвращается 0xFF			;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IN_KEY:
	PUSH	B	;
	PUSH	D	;
	PUSH	H	;
	LXI	H,SEEK	;
	MVI	C,255	;
	DI		;
	DCR	M	;
	JZ	INQ	;
	MOV	B,M	;
	INX	H	;
	MOV	C,M	;
	EI		;
	MOV	D,H	;
	MOV	E,L	;
IN0:			;
	INX	H	;
	MOV	A,M	;
	STAX	D	;
	INX	D	;
	DCR	B	;
	JNZ	IN0	;
	DCR	M	;
INQ:			;
	EI		;
	INR	M	;
	MOV	A,C	;
	POP	H	;
	POP	D	;
	POP	B	;
	RET		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;	Прцедура осуществляет сброс клавиатуры		;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
KEY_RESET:
	PUSH	PSW	;
	MVI	A,1	;
	STA	SEEK	;
	POP	PSW	;
	RET		;
	END		;

